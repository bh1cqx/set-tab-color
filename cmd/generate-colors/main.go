package main

import (
	"encoding/json"
	"fmt"
	"os"
	"os/exec"
	"path/filepath"
	"sort"
	"strings"
	"time"
)

func main() {
	// Read the JSON file from the submodule
	jsonPath := filepath.Join("css-color-names", "css-color-names.json")
	data, err := os.ReadFile(jsonPath)
	if err != nil {
		fmt.Fprintf(os.Stderr, "Error reading %s: %v\n", jsonPath, err)
		fmt.Fprintf(os.Stderr, "Make sure git submodules are initialized: git submodule update --init\n")
		os.Exit(1)
	}

	// Parse the JSON
	var colors map[string]string
	if err := json.Unmarshal(data, &colors); err != nil {
		fmt.Fprintf(os.Stderr, "Error parsing JSON: %v\n", err)
		os.Exit(1)
	}

	// Read the license file
	licensePath := filepath.Join("css-color-names", "LICENSE")
	licenseData, err := os.ReadFile(licensePath)
	if err != nil {
		fmt.Fprintf(os.Stderr, "Error reading %s: %v\n", licensePath, err)
		os.Exit(1)
	}
	licenseText := string(licenseData)

	// Get current git commit of submodule for attribution
	submoduleCommit := getSubmoduleCommit()

	// Generate Go source file
	output := generateGoSource(colors, submoduleCommit, licenseText)

	// Write to generated directory
	outputPath := filepath.Join("generated", "css_colors.go")
	if err := os.WriteFile(outputPath, []byte(output), 0644); err != nil {
		fmt.Fprintf(os.Stderr, "Error writing %s: %v\n", outputPath, err)
		os.Exit(1)
	}

	fmt.Printf("Generated %s with %d CSS colors\n", outputPath, len(colors))
}

func getSubmoduleCommit() string {
	// Get the commit hash that the submodule is pinned to by running git in the submodule directory
	cmd := exec.Command("git", "rev-parse", "HEAD")
	cmd.Dir = "css-color-names"
	if output, err := cmd.Output(); err == nil {
		return strings.TrimSpace(string(output))
	}
	return "unknown"
}

func generateGoSource(colors map[string]string, commit string, licenseText string) string {
	var b strings.Builder

	// Header with attribution
	b.WriteString(fmt.Sprintf(`// Code generated by go run cmd/generate-colors/main.go. DO NOT EDIT.
// Generated on %s from css-color-names submodule at commit %s

/*
Package generated contains CSS color name mappings.

This file contains CSS color data derived from:
  Repository: https://github.com/bahamas10/css-color-names
  Author: Dave Eddy <dave@daveeddy.com>
  License: MIT (see original license below)
  Commit: %s

Original License:
%s
*/

package generated

// CSSColors contains all CSS color names mapped to their hex values
var CSSColors = map[string]string{
`, time.Now().Format(time.RFC3339), commit, commit, licenseText))

	// Sort keys for consistent output
	keys := make([]string, 0, len(colors))
	for k := range colors {
		keys = append(keys, k)
	}
	sort.Strings(keys)

	// Generate the map entries
	for _, name := range keys {
		hex := colors[name]
		b.WriteString(fmt.Sprintf("\t%q: %q,\n", name, hex))
	}

	b.WriteString("}\n")
	return b.String()
}
